{"meta":{"title":"fire","subtitle":"Believe in yourself","description":"技术与生活","author":"fire","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Redis持久化","slug":"redis","date":"2017-03-01T08:14:02.000Z","updated":"2017-04-26T15:50:47.973Z","comments":true,"path":"2017/03/01/redis/","link":"","permalink":"http://yoursite.com/2017/03/01/redis/","excerpt":"","text":"Redis的持久化Redis的强大功能很大程度上是由于其将所有数据都存储在内存中，为了使Redis在重启后仍能保证数据不丢失，需要将数据从内存中以某种形式持久化到硬盘中。Redis支持两种方式的持久化，一种是RDB方式，一种是AOF方式。可以单独使用其中一种或将两种结合使用。 RDB RDB方式是通过快照完成的，当符合一定条件时Redis会自动将内存中的所有数据进行快照并且存储到硬盘上。进行快照的条件在配置文件中指定。有2个参数构成：时间和改动的键的个数，当在指定时间内被更改的键的个数大于指定数值时就会进行快照。 RDB是Redis的默认持久化方式。1.配置12345678910111213141516171819202122232425################################ SNAPSHOTTING ################################## Save the DB on disk:## save &lt;seconds&gt; &lt;changes&gt;## Will save the DB if both the given number of seconds and the given# number of write operations against the DB occurred.## In the example below the behaviour will be to save:# after 900 sec (15 min) if at least 1 key changed# after 300 sec (5 min) if at least 10 keys changed# after 60 sec if at least 10000 keys changed## Note: you can disable saving completely by commenting out all \"save\" lines.## It is also possible to remove all the previously configured save# points by adding a save directive with a single empty string argument# like in the following example:## save \"\"save 900 1save 300 10save 60 10000 在配置文件中已经预置了3个条件：123save 900 1 #15分钟内有至少1个键被更改则进行快照save 300 10 #5分钟内有至少10个键被更改则进行快照save 60 10000 #1分钟内有至少10000个键被更改则进行快照 以上条件之间是”或”的关系。 2.rdb文件默认的rdb的文件路径是在当前目录，文件名是：dump.rdb,可以在配置文件中修改路径和文件名，分别是dir和dbfilename。123456789101112# The filename where to dump the DBdbfilename dump.rdb #快照文件# The working directory.## The DB will be written inside this directory, with the filename specified# above using the 'dbfilename' configuration directive.## The Append Only File will also be created inside this directory.## Note that you must specify a directory here, not a file name.dir ./ #存储路径 3.RDB数据恢复过程Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存，一般情况下1GB的快照文件载入到内存的时间约为20~30秒。(不同服务器会有差异) 4.快照过程RDB的快照过程如下: 1.Redis使用fork函数复制一份当前进程(父进程)的副本(子进程); 2.父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入到硬盘中的临时文件; 3.当子进程写入完所有数据后会用该临时文件替换旧的RDB文件。5.手动快照如果没有触发自动快照,需要对redis执行手动快照,SAVE和BGSAVE都是执行手动快照,但是两者有区别:12SAVE命令:是由主进程进行快照,会阻塞其他请求。BGSAVE命令:是通过fork子进程进行快照。 6.快照需要注意注意:由于Redis使用fork来复制一份当前进程，那么子进程就会占有和主进程一样内存资源，比如说主进程8GB内存,那么在备份的时候必须保证有16GB的内存,要不然会启用虚拟内存,性能非常差。 7.RDB文件的压缩RDB文件是通过压缩的,可以通过配置rdbcompression参数来禁用压缩。压缩和不压缩的优缺点： 压缩： 优点：减少磁盘存储空间 缺点：消耗CPU资源 不压缩： 优点：不消耗CPU资源 缺点：占用磁盘空间多 如何选择？ 看需求、看服务器资源情况。Redis默认是开启压缩的，配置:12345# Compress string objects using LZF when dump .rdb databases?# For default that's set to 'yes' as it's almost always a win.# If you want to save some CPU in the saving child set it to 'no' but# the dataset will likely be bigger if you have compressible values or keys.rdbcompression yes AOF123456Redis的AOF持久化策略是将发送到Redis服务端的每一条命令都记录下来,并且保存到硬盘中的AOF文件,AOF文件的位置和RDB文件的位置相同,都是通过dir参数设置,默认的文件名是appendonly.aof,可以通过appendfilename参数修改。127.0.0.1:6379&gt;set test 123OK127.0.0.1:6379&gt;set test2 234OK执行以上命令,可以看到appendonly.aof文件保存了操作命令： 1.测试AOF当客户端向服务器发送Redis命令时，Redis会将所执行的命令记录到aof文件中，如下： 2.优化AOF文件1可以使用BGREWRITEAOF命令重写AOF文件。 目的：去除数据的中间执行过程，保留最终数据命令即可。 3.重写策略12345重写策略的参数设置：auto-aof-rewrite-percentage 100当前的AOF文件大小超过上一次重写时的AOF文件大小的百分之多少时会再次进行重写,如果之前没有重写过，则以启动时的AOF文件大小为依据。auto-aof-rewrite-min-size 64mb限制了允许重写的最小AOF文件大小,通常在AOF文件很小的时候即使其中有些冗余的命令也是可以忽略的。 4.文件同步策略1234文件写入默认情况下会先写入到系统的缓存中,系统每30秒同步一次,才是真正的写入到硬盘,如果在这30秒服务器宕机那数据也会丢失的,Redis可以通过配置来修改同步策略：#appendfsync always 每次都同步(最安全但是最慢)appendfsync everysec 每秒同步(默认的同步策略)#appendfsync no 不主动同步,由操作系统来决定(最块但是不安全) 注意：即使每秒做文件同步也可能导致数据丢失。","categories":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/categories/redis/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}]}]}